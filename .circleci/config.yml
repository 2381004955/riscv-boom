# CircleCI Configuration File

# version of circleci
version: 2.1

# "plugins" to use
orbs:
    aws-cli: circleci/aws-cli@0.1.19

# pipeline parameters
parameters:
    # parameters to manage workload/job flow
    largefireboom_buildroot:
        type: boolean
        default: false
    largefireboom_fedora:
        type: boolean
        default: false
    largefireboom_coremark:
        type: boolean
        default: false
    largefireboom_spec17-intspeed:
        type: boolean
        default: false
    largefireboom_spec17-intrate:
        type: boolean
        default: false
    launchrunfarm_passed:
        type: boolean
        default: false
    infrasetup_passed:
        type: boolean
        default: false
    runworkload_passed:
        type: boolean
        default: false

    # workload run parameters
    build-and-test-boom-configs-run:
        type: boolean
        default: true
    init-firesim-run:
        type: boolean
        default: true
    finish-firesim-afi-run:
        type: boolean
        default: false
    launch-firesim-workloads-run:
        type: boolean
        default: false
    finish-firesim-workload-run:
        type: boolean
        default: false

# re-usable commands
commands:
    ssh-checkout:
        description: "Add SSH key and checkout code"
        steps:
            - add_ssh_keys:
                fingerprints:
                    - "2b:95:8d:2e:23:b9:cf:0a:d6:65:4c:d5:76:93:42:07"
            - checkout

    toolchain-build:
        description: "Build a toolchain"
        parameters:
            tools-version:
                type: string
        steps:
            - checkout
            - run:
                name: Create hash of toolchains
                command: |
                    .circleci/create-hash.sh
            - restore_cache:
                keys:
                    - << parameters.tools-version >>-installed-v4-{{ checksum "../<< parameters.tools-version >>.hash" }}
            - run:
                name: Building << parameters.tools-version >>
                command: |
                    .circleci/build-toolchains.sh << parameters.tools-version >>
                no_output_timeout: 120m
            - save_cache:
                key: << parameters.tools-version >>-installed-v4-{{ checksum "../<< parameters.tools-version >>.hash" }}
                paths:
                    - "/home/riscvuser/<< parameters.tools-version >>-install"

    prepare-rtl:
        description: "Run the prepare step of RTL"
        parameters:
            tools-version:
                type: string
                default: "riscv-tools"
            config-key:
                type: string
            timeout:
                type: string
                default: "120m"
        steps:
            - ssh-checkout
            - run:
                name: Create hash of toolchains
                command: |
                    .circleci/create-hash.sh
            - restore_cache:
                keys:
                    - << parameters.tools-version >>-installed-v4-{{ checksum "../<< parameters.tools-version >>.hash" }}
            - restore_cache:
                keys:
                    - chipyard-v13-{{ checksum "CHIPYARD.hash" }}
            - restore_cache:
                keys:
                    - verilator-v13-{{ checksum "CHIPYARD.hash" }}
            - run:
                name: Building << parameters.config-key >> Config using Verilator
                command: .circleci/do-rtl-build.sh << parameters.config-key >>
                no_output_timeout: << parameters.timeout >>
            - save_cache:
                key: << parameters.config-key >>config-{{ .Branch }}-{{ .Revision }}
                paths:
                    - "/home/riscvuser/chipyard"

    test-setup:
        description: "Setup the environment for tests to run"
        parameters:
            tools-version:
                type: string
                default: "riscv-tools"
            config-key:
                type: string
        steps:
            - checkout
            - run:
                name: Create hash of toolchains
                command: |
                    .circleci/create-hash.sh
            - restore_cache:
                keys:
                    - << parameters.tools-version >>-installed-v4-{{ checksum "../<< parameters.tools-version >>.hash" }}
            - restore_cache:
                keys:
                    - << parameters.config-key >>config-{{ .Branch }}-{{ .Revision }}
            - restore_cache:
                keys:
                    - verilator-v13-{{ checksum "CHIPYARD.hash" }}

    firesim-workload-build:
        description: "Build a FireSim workload"
        parameters:
            config-key:
                type: string
            workload:
                type: string
        steps:
            - ssh-checkout
            - restore_cache:
                keys:
                    - firesim-aws-instance-data-{{ .Branch }}-{{ .Revision }}
            - run:
                name: Build a << parameters.config-key >> << parameters.workload >> workload
                command: |
                    .circleci/firesim-build-workload.sh << parameters.config-key >> << parameters.workload >>

# set of jobs to run
jobs:
    install-riscv-toolchain:
        docker:
            - image: riscvboom/riscvboom-images:0.0.12
        environment:
            JVM_OPTS: -Xmx3200m # Customize the JVM maximum heap limit
            TERM: dumb
        steps:
            - toolchain-build:
                tools-version: "riscv-tools"
    install-esp-toolchain:
        docker:
            - image: riscvboom/riscvboom-images:0.0.12
        environment:
            JVM_OPTS: -Xmx3200m # Customize the JVM maximum heap limit
            TERM: dumb
        steps:
            - toolchain-build:
                tools-version: "esp-tools"
    prepare-build-environment:
        docker:
            - image: riscvboom/riscvboom-images:0.0.12
        environment:
            JVM_OPTS: -Xmx3200m # Customize the JVM maximum heap limit
            TERM: dumb
        steps:
            - ssh-checkout
            - restore_cache:
                keys:
                    - chipyard-v13-{{ checksum "CHIPYARD.hash" }}
            - restore_cache:
                keys:
                    - verilator-v13-{{ checksum "CHIPYARD.hash" }}
            - run:
                name: Build Verilator and checkout submodules
                command: |
                    .circleci/prepare-for-rtl-build.sh
                no_output_timeout: 120m
            - save_cache:
                key: chipyard-v13-{{ checksum "CHIPYARD.hash" }}
                paths:
                    - "/home/riscvuser/chipyard"
            - save_cache:
                key: verilator-v13-{{ checksum "CHIPYARD.hash" }}
                paths:
                    - "/home/riscvuser/verilator"
    run-scala-checkstyle:
        docker:
            - image: riscvboom/riscvboom-images:0.0.12
        environment:
            JVM_OPTS: -Xmx3200m # Customize the JVM maximum heap limit
            TERM: dumb
        steps:
            - checkout
            - run:
                name: Run Scala checkstyle
                command: make checkstyle
    prepare-smallboomconfig:
        docker:
            - image: riscvboom/riscvboom-images:0.0.12
        environment:
            JVM_OPTS: -Xmx3200m # Customize the JVM maximum heap limit
            TERM: dumb
        steps:
            - prepare-rtl:
                config-key: "smallboom"
    prepare-mediumboomconfig:
        docker:
            - image: riscvboom/riscvboom-images:0.0.12
        environment:
            JVM_OPTS: -Xmx3200m # Customize the JVM maximum heap limit
            TERM: dumb
        steps:
            - prepare-rtl:
                config-key: "mediumboom"
    prepare-largeboomconfig:
        docker:
            - image: riscvboom/riscvboom-images:0.0.12
        environment:
            JVM_OPTS: -Xmx3200m # Customize the JVM maximum heap limit
            TERM: dumb
        steps:
            - prepare-rtl:
                config-key: "largeboom"
    prepare-megaboomconfig:
        docker:
            - image: riscvboom/riscvboom-images:0.0.12
        environment:
            JVM_OPTS: -Xmx3200m # Customize the JVM maximum heap limit
            TERM: dumb
        steps:
            - prepare-rtl:
                config-key: "megaboom"
                timeout: "240m"
    prepare-smallboomandrocketconfig:
        docker:
            - image: riscvboom/riscvboom-images:0.0.12
        environment:
            JVM_OPTS: -Xmx3200m # Customize the JVM maximum heap limit
            TERM: dumb
        steps:
            - prepare-rtl:
                config-key: "boomandrocket"
    prepare-smallrv32boomconfig:
        docker:
            - image: riscvboom/riscvboom-images:0.0.12
        environment:
            JVM_OPTS: -Xmx3200m # Customize the JVM maximum heap limit
            TERM: dumb
        steps:
            - prepare-rtl:
                config-key: "rv32boom"
    prepare-hwachaboomconfig:
        docker:
            - image: riscvboom/riscvboom-images:0.0.12
        environment:
            JVM_OPTS: -Xmx3200m # Customize the JVM maximum heap limit
            TERM: dumb
        steps:
            - prepare-rtl:
                tools-version: "esp-tools"
                config-key: "hwachaboom"
    smallboomconfig-run-csmith-tests:
        docker:
            - image: riscvboom/riscvboom-images:0.0.12
        environment:
            JVM_OPTS: -Xmx3200m # Customize the JVM maximum heap limit
            TERM: dumb
        steps:
            - test-setup:
                config-key: "smallboom"
            - run:
                name: Run SmallBoomConfig csmith tests
                command: .circleci/build-run-csmith-tests.sh smallboom 50
                no_output_timeout: 30m
    smallboomconfig-run-riscv-tests:
        docker:
            - image: riscvboom/riscvboom-images:0.0.12
        environment:
            JVM_OPTS: -Xmx3200m # Customize the JVM maximum heap limit
            TERM: dumb
        steps:
            - test-setup:
                config-key: "smallboom"
            - run:
                name: Run SmallBoomConfig riscv tests
                command: .circleci/run-tests.sh smallboom
    mediumboomconfig-run-csmith-tests:
        docker:
            - image: riscvboom/riscvboom-images:0.0.12
        environment:
            JVM_OPTS: -Xmx3200m # Customize the JVM maximum heap limit
            TERM: dumb
        steps:
            - test-setup:
                config-key: "mediumboom"
            - run:
                name: Run MediumBoomConfig csmith tests
                command: .circleci/build-run-csmith-tests.sh mediumboom 50
                no_output_timeout: 30m
    mediumboomconfig-run-riscv-tests:
        docker:
            - image: riscvboom/riscvboom-images:0.0.12
        environment:
            JVM_OPTS: -Xmx3200m # Customize the JVM maximum heap limit
            TERM: dumb
        steps:
            - test-setup:
                config-key: "mediumboom"
            - run:
                name: Run MediumBoomConfig riscv tests
                command: .circleci/run-tests.sh mediumboom
    largeboomconfig-run-csmith-tests:
        docker:
            - image: riscvboom/riscvboom-images:0.0.12
        environment:
            JVM_OPTS: -Xmx3200m # Customize the JVM maximum heap limit
            TERM: dumb
        steps:
            - test-setup:
                config-key: "largeboom"
            - run:
                name: Run LargeBoomConfig csmith tests
                command: .circleci/build-run-csmith-tests.sh largeboom 40
                no_output_timeout: 30m
    largeboomconfig-run-riscv-tests:
        docker:
            - image: riscvboom/riscvboom-images:0.0.12
        environment:
            JVM_OPTS: -Xmx3200m # Customize the JVM maximum heap limit
            TERM: dumb
        steps:
            - test-setup:
                config-key: "largeboom"
            - run:
                name: Run LargeBoomConfig riscv tests
                command: .circleci/run-tests.sh largeboom
    megaboomconfig-run-csmith-tests:
        docker:
            - image: riscvboom/riscvboom-images:0.0.12
        environment:
            JVM_OPTS: -Xmx3200m # Customize the JVM maximum heap limit
            TERM: dumb
        steps:
            - test-setup:
                config-key: "megaboom"
            - run:
                name: Run MegaBoomConfig csmith tests
                command: .circleci/build-run-csmith-tests.sh megaboom 40
                no_output_timeout: 30m
    megaboomconfig-run-riscv-tests:
        docker:
            - image: riscvboom/riscvboom-images:0.0.12
        environment:
            JVM_OPTS: -Xmx3200m # Customize the JVM maximum heap limit
            TERM: dumb
        steps:
            - test-setup:
                config-key: "megaboom"
            - run:
                name: Run MegaBoomConfig riscv tests
                command: .circleci/run-tests.sh megaboom
                no_output_timeout: 30m
    smallboomandrocketconfig-run-csmith-tests:
        docker:
            - image: riscvboom/riscvboom-images:0.0.12
        environment:
            JVM_OPTS: -Xmx3200m # Customize the JVM maximum heap limit
            TERM: dumb
        steps:
            - test-setup:
                config-key: "boomandrocket"
            - run:
                name: Run SmallBoomAndRocketConfig csmith tests
                command: .circleci/build-run-csmith-tests.sh boomandrocket 50
                no_output_timeout: 30m
    smallboomandrocketconfig-run-riscv-tests:
        docker:
            - image: riscvboom/riscvboom-images:0.0.12
        environment:
            JVM_OPTS: -Xmx3200m # Customize the JVM maximum heap limit
            TERM: dumb
        steps:
            - test-setup:
                config-key: "boomandrocket"
            - run:
                name: Run SmallBoomAndRocketConfig riscv tests
                command: .circleci/run-tests.sh boomandrocket
    smallrv32boomconfig-run-csmith-tests:
        docker:
            - image: riscvboom/riscvboom-images:0.0.12
        environment:
            JVM_OPTS: -Xmx3200m # Customize the JVM maximum heap limit
            TERM: dumb
        steps:
            - test-setup:
                config-key: "rv32boom"
            - run:
                name: Run SmallRV32BoomConfig csmith tests
                command: .circleci/build-run-csmith-tests.sh rv32boom 50
                no_output_timeout: 30m
    smallrv32boomconfig-run-riscv-tests:
        docker:
            - image: riscvboom/riscvboom-images:0.0.12
        environment:
            JVM_OPTS: -Xmx3200m # Customize the JVM maximum heap limit
            TERM: dumb
        steps:
            - test-setup:
                config-key: "rv32boom"
            - run:
                name: Run SmallRV32BoomConfig riscv tests
                command: .circleci/run-tests.sh rv32boom
    hwachaboomconfig-run-riscv-tests:
        docker:
            - image: riscvboom/riscvboom-images:0.0.12
        environment:
            JVM_OPTS: -Xmx3200m # Customize the JVM maximum heap limit
            TERM: dumb
        steps:
            - test-setup:
                config-key: "hwachaboom"
                tools-version: "esp-tools"
            - run:
                name: Run HwachaBoomConfig riscv tests
                command: .circleci/run-tests.sh hwachaboom

    ###########################################################################################

    initialize-manager:
        executor: aws-cli/default
        steps:
            - ssh-checkout
            - aws-cli/setup
            - run:
                name: Initialize FireSim manager instance with Chipyard
                command: |
                    .circleci/firesim-init-manager.sh
            - save_cache:
                key: firesim-aws-instance-data-{{ .Branch }}-{{ .Revision }}
                paths:
                    - "/tmp/FSIM_MANAGER_INSTANCE_DATA.txt"

    build-largefireboom-buildroot:
        docker:
            - image: riscvboom/riscvboom-images:0.0.12
        environment:
            JVM_OPTS: -Xmx3200m # Customize the JVM maximum heap limit
            TERM: dumb
        steps:
            - firesim-workload-build:
                config-key: "largefireboom"
                workload: "buildroot"
    build-largefireboom-fedora:
        docker:
            - image: riscvboom/riscvboom-images:0.0.12
        environment:
            JVM_OPTS: -Xmx3200m # Customize the JVM maximum heap limit
            TERM: dumb
        steps:
            - firesim-workload-build:
                config-key: "largefireboom"
                workload: "fedora"
    build-largefireboom-coremark:
        docker:
            - image: riscvboom/riscvboom-images:0.0.12
        environment:
            JVM_OPTS: -Xmx3200m # Customize the JVM maximum heap limit
            TERM: dumb
        steps:
            - firesim-workload-build:
                config-key: "largefireboom"
                workload: "coremark"
    build-largefireboom-spec17-intspeed:
        docker:
            - image: riscvboom/riscvboom-images:0.0.12
        environment:
            JVM_OPTS: -Xmx3200m # Customize the JVM maximum heap limit
            TERM: dumb
        steps:
            - firesim-workload-build:
                config-key: "largefireboom"
                workload: "spec17-intspeed"
    build-largefireboom-spec17-intrate:
        docker:
            - image: riscvboom/riscvboom-images:0.0.12
        environment:
            JVM_OPTS: -Xmx3200m # Customize the JVM maximum heap limit
            TERM: dumb
        steps:
            - firesim-workload-build:
                config-key: "largefireboom"
                workload: "spec17-intrate"
    launch-largefireboom-afi-build:
        docker:
            - image: riscvboom/riscvboom-images:0.0.12
        environment:
            JVM_OPTS: -Xmx3200m # Customize the JVM maximum heap limit
            TERM: dumb
        steps:
            - ssh-checkout
            - restore_cache:
                keys:
                    - firesim-aws-instance-data-{{ .Branch }}-{{ .Revision }}
            - run:
                name: Build a LargeFireBoom AFI
                command: |
                    .circleci/firesim-build-afi.sh largefireboom
                no_output_timeout: 240m
    largefireboom-afi-failed:
        executor: aws-cli/default
        steps:
            - ssh-checkout
            - aws-cli/setup
            - restore_cache:
                keys:
                    - firesim-aws-instance-data-{{ .Branch }}-{{ .Revision }}
            - run:
                name: LargeFireBoom AFI build failed
                command: |
                    .circleci/firesim-afi-failed.sh largefireboom
    launch-largefireboom-workloads:
        docker:
            - image: riscvboom/riscvboom-images:0.0.12
        environment:
            JVM_OPTS: -Xmx3200m # Customize the JVM maximum heap limit
            TERM: dumb
        steps:
            - ssh-checkout
            - restore_cache:
                keys:
                    - firesim-aws-instance-data-{{ .Branch }}-{{ .Revision }}
            - when:
                condition: << pipeline.parameters.largefireboom_buildroot >>
                steps:
                    - run:
                        name: Run a LargeFireBoom Buildroot workload
                        command: |
                            .circleci/firesim-run-workload.sh largefireboom buildroot 30m
            - when:
                condition: << pipeline.parameters.largefireboom_fedora >>
                steps:
                    - run:
                        name: Run a LargeFireBoom Fedora workload
                        command: |
                            .circleci/firesim-run-workload.sh largefireboom fedora 30m
            - when:
                condition: << pipeline.parameters.largefireboom_coremark >>
                steps:
                    - run:
                        name: Run a LargeFireBoom CoreMark workload
                        command: |
                            .circleci/firesim-run-workload.sh largefireboom coremark 30m
            - when:
                condition: << pipeline.parameters.largefireboom_spec17-intspeed >>
                steps:
                    - run:
                        name: Run a LargeFireBoom SPEC17 intspeed workload
                        command: |
                            .circleci/firesim-run-workload.sh largefireboom spec17-intspeed 30h
            - when:
                condition: << pipeline.parameters.largefireboom_spec17-intrate >>
                steps:
                    - run:
                        name: Run a LargeFireBoom SPEC17 intrate workload
                        command: |
                            .circleci/firesim-run-workload.sh largefireboom spec17-intrate 72h
    largefireboom-workload-finished:
        executor: aws-cli/default
        steps:
            - ssh-checkout
            - aws-cli/setup
            - restore_cache:
                keys:
                    - firesim-aws-instance-data-{{ .Branch }}-{{ .Revision }}
            - when:
                condition: << pipeline.parameters.largefireboom_buildroot >>
                steps:
                    - run:
                        name: Buildroot workload finished
                        command: |
                            .circleci/firesim-run-finished.sh largefireboom buildroot << pipeline.parameters.launchrunfarm_passed >> << pipeline.parameters.infrasetup_passed >> << pipeline.parameters.runworkload_passed >>
            - when:
                condition: << pipeline.parameters.largefireboom_fedora >>
                steps:
                    - run:
                        name: Fedora workload finished
                        command: |
                            .circleci/firesim-run-finished.sh largefireboom fedora << pipeline.parameters.launchrunfarm_passed >> << pipeline.parameters.infrasetup_passed >> << pipeline.parameters.runworkload_passed >>
            - when:
                condition: << pipeline.parameters.largefireboom_coremark >>
                steps:
                    - run:
                        name: CoreMark workload finished
                        command: |
                            .circleci/firesim-run-finished.sh largefireboom coremark << pipeline.parameters.launchrunfarm_passed >> << pipeline.parameters.infrasetup_passed >> << pipeline.parameters.runworkload_passed >>
            - when:
                condition: << pipeline.parameters.largefireboom_spec17-intspeed >>
                steps:
                    - run:
                        name: SPEC17 intspeed workload finished
                        command: |
                            .circleci/firesim-run-finished.sh largefireboom spec17-intspeed << pipeline.parameters.launchrunfarm_passed >> << pipeline.parameters.infrasetup_passed >> << pipeline.parameters.runworkload_passed >>
            - when:
                condition: << pipeline.parameters.largefireboom_spec17-intrate >>
                steps:
                    - run:
                        name: SPEC17 intrate workload finished
                        command: |
                            .circleci/firesim-run-finished.sh largefireboom spec17-intrate << pipeline.parameters.launchrunfarm_passed >> << pipeline.parameters.infrasetup_passed >> << pipeline.parameters.runworkload_passed >>

# Order and dependencies of jobs to run
workflows:
    version: 2
    build-and-test-boom-configs:
        when: << pipeline.parameters.build-and-test-boom-configs-run >>
        jobs:
            # TODO: disable
            # temp approval to save jobs
            - temp-approval:
                type: approval

            # Make the toolchains
            - install-riscv-toolchain:
                requires:
                    - temp-approval

            - install-esp-toolchain:
                requires:
                    - temp-approval

            # Build verilator
            - prepare-build-environment:
                requires:
                    - temp-approval

            # Run generic syntax checking
            - run-scala-checkstyle:
                requires:
                    - temp-approval

            # Prepare the verilator builds
            - prepare-smallboomconfig:
                requires:
                    - prepare-build-environment
                    - install-riscv-toolchain
            - prepare-mediumboomconfig:
                requires:
                    - prepare-build-environment
                    - install-riscv-toolchain
            - prepare-largeboomconfig:
                requires:
                    - prepare-build-environment
                    - install-riscv-toolchain
            - prepare-megaboomconfig:
                requires:
                    - prepare-build-environment
                    - install-riscv-toolchain
            - prepare-smallboomandrocketconfig:
                requires:
                    - prepare-build-environment
                    - install-riscv-toolchain
            - prepare-smallrv32boomconfig:
                requires:
                    - prepare-build-environment
                    - install-riscv-toolchain
            - prepare-hwachaboomconfig:
                requires:
                    - prepare-build-environment
                    - install-esp-toolchain

            # Run the SmallBoomConfig tests
            - smallboomconfig-run-csmith-tests:
                requires:
                    - prepare-smallboomconfig
            - smallboomconfig-run-riscv-tests:
                requires:
                    - prepare-smallboomconfig

            # Run the MediumBoomConfig tests
            - mediumboomconfig-run-csmith-tests:
                requires:
                    - prepare-mediumboomconfig
            - mediumboomconfig-run-riscv-tests:
                requires:
                    - prepare-mediumboomconfig

            # Run the LargeBoomConfig tests
            - largeboomconfig-run-csmith-tests:
                requires:
                    - prepare-largeboomconfig
            - largeboomconfig-run-riscv-tests:
                requires:
                    - prepare-largeboomconfig

            # Run the MegaBoomConfig tests
            - megaboomconfig-run-csmith-tests:
                requires:
                    - prepare-megaboomconfig
            - megaboomconfig-run-riscv-tests:
                requires:
                    - prepare-megaboomconfig

            # Run the SmallBoomAndRocketConfig tests
            - smallboomandrocketconfig-run-csmith-tests:
                requires:
                    - prepare-smallboomandrocketconfig
            - smallboomandrocketconfig-run-riscv-tests:
                requires:
                    - prepare-smallboomandrocketconfig

            # Run the SmallRV32BoomConfig tests
            - smallrv32boomconfig-run-riscv-tests:
                requires:
                    - prepare-smallrv32boomconfig

            # Run the HwachaBoomConfig tests
            - hwachaboomconfig-run-riscv-tests:
                requires:
                    - prepare-hwachaboomconfig

    init-firesim:
        # TODO: re-enable
        # run firesim workflow every thursday
        #triggers:
        #    - schedule:
        #        cron: "0 0 * * 4"
        #        filters:
        #            branches:
        #                only:
        #                    - master

        when: << pipeline.parameters.init-firesim-run >>
        jobs:
            - aws-approval:
                type: approval

            - initialize-manager:
                requires:
                    - aws-approval

            - launch-largefireboom-afi-build:
                requires:
                    - initialize-manager

            - build-largefireboom-buildroot:
                requires:
                    - initialize-manager

            - build-largefireboom-fedora:
                requires:
                    - initialize-manager
                    - build-largefireboom-buildroot

            - build-largefireboom-coremark:
                requires:
                    - initialize-manager
                    - build-largefireboom-buildroot
                    - build-largefireboom-fedora

            - build-largefireboom-spec17-intspeed:
                requires:
                    - initialize-manager
                    - build-largefireboom-buildroot
                    - build-largefireboom-fedora
                    - build-largefireboom-coremark

            - build-largefireboom-spec17-intrate:
                requires:
                    - initialize-manager
                    - build-largefireboom-buildroot
                    - build-largefireboom-fedora
                    - build-largefireboom-coremark
                    - build-largefireboom-spec17-intspeed

    finish-firesim-afi:
        when: << pipeline.parameters.finish-firesim-afi-run >>
        jobs:
            - largefireboom-afi-failed

    launch-firesim-workloads:
        when: << pipeline.parameters.launch-firesim-workloads-run >>
        jobs:
            - launch-largefireboom-workloads

    finish-firesim-workload:
        when: << pipeline.parameters.finish-firesim-workload-run >>
        jobs:
            - largefireboom-workload-finished
